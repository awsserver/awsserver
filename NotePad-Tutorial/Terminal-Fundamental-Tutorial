###Remotely Lauch GUI interface

--yum install screen
--screen
--export DISPLAY=":0.0"

###If you still get the “cannot open display” error, set the DISPLAY variable as shown below.

--export DISPLAY='IP:0.0'



###Remotely Lauch teamviewer and GUI interface via ssh 
###Allow clients to connect from any host using xhost+
--xhost

###Disabled xhost


--xhost +

######Enabled xhost
--xhost -

--ssh username@hostname -X
--teamviewer
--firefox

########Font and colors in terminal paste these line in /etc/bashrc
--vi /etc/bashrc

# If id command returns zero, you’ve root access.
if [ $(id -u) -eq 0 ];  #if -eq = 0 (Green Color) or 1 (red color)
then # you are root, set red colour prompt
  PS1="\\[$(tput setaf 1)\\]\\u@\\h:\\w #\\[$(tput sgr0)\\]"
else # normal
  PS1="[\\u@\\h:\\w] $"
fi

#########################

How to: Change / Setup bash custom prompt (PS1)

########################
Most of us work with a shell prompt. By default most Linux distro displays hostname and current working directory. You can easily customize your prompt to display information important to you. You change look and feel by adding colors. In this small howto I will explain howto setup:
a] Howto customizing a bash shell to get a good looking prompt
b] Configure the appearance of the terminal.
c] Apply themes using bashish
d] Howto pimp out your shell prompt

Prompt is control via a special shell variable. You need to set PS1, PS2, PS3 and PS4 variable. If set, the value is executed as a command prior to issuing each primary prompt.

    PS1 - The value of this parameter is expanded (see PROMPTING below) and used as the primary prompt string. The default value is \s-\v\$ .
    PS2 - The value of this parameter is expanded as with PS1 and used as the secondary prompt string. The default is >
    PS3 - The value of this parameter is used as the prompt for the select command
    PS4 - The value of this parameter is expanded as with PS1 and the value is printed before each command bash displays during an execution trace. The first character of PS4 is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is +

How do I display current prompt setting?
Simply use echo command, enter:


--echo $PS1
Output:

\\u@\h \\W]\\$



How do I modify or change the prompt?
Modifying the prompt is easy task. Just assign a new value to PS1 and hit enter key:



My old prompt --> [vivek@105r2 ~]$

--PS1="touch me : "

Output: My new prompt
touch me : 



So when executing interactively, bash displays the primary prompt PS1 when it is ready to read a command, and the secondary prompt PS2 when it needs more input to complete a command. Bash allows these prompt strings to be customized by inserting a number of backslash-escaped special characters that are decoded as follows:

    \a : an ASCII bell character (07)
    \d : the date in "Weekday Month Date" format (e.g., "Tue May 26")
    \D{format} : the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required
    \e : an ASCII escape character (033)
    \h : the hostname up to the first '.'
    \H : the hostname
    \j : the number of jobs currently managed by the shell
    \l : the basename of the shell’s terminal device name
    \n : newline
    \r : carriage return
    \s : the name of the shell, the basename of $0 (the portion following the final slash)
    \t : the current time in 24-hour HH:MM:SS format
    \T : the current time in 12-hour HH:MM:SS format
    \@ : the current time in 12-hour am/pm format
    \A : the current time in 24-hour HH:MM format
    \u : the username of the current user
    \v : the version of bash (e.g., 2.00)
    \V : the release of bash, version + patch level (e.g., 2.00.0)
    \w : the current working directory, with $HOME abbreviated with a tilde
    \W : the basename of the current working directory, with $HOME abbreviated with a tilde
    \! : the history number of this command
    \# : the command number of this command
    \$ : if the effective UID is 0, a #, otherwise a $
    \nnn : the character corresponding to the octal number nnn
    \\ : a backslash
    \[ : begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
    \] : end a sequence of non-printing characters

Let us try to set the prompt so that it can display today’d date and hostname:
PS1="\d \h $ "
Output:

Sat Jun 02 server $ 

Now setup prompt to display date/time, hostname and current directory:
$ PS1="[\d \t \u@\h:\w ] $ "
Output:

[Sat Jun 02 14:24:12 vivek@server:~ ] $


How do I add colors to my prompt?
You can change the color of your shell prompt to impress your friend or to make your own life quite easy while working at command prompt.
Putting it all together
Let us say when you login as root/superuser, you want to get visual confirmation using red color prompt. To distinguish between superuser and normal user you use last character in the prompt, if it changes from $ to #, you have superuser privileges. So let us set your prompt color to RED when you login as root, otherwise display normal prompt.

Open /etc/bashrc (Redhat and friends) / or /etc/bash.bashrc (Debian/Ubuntu) or /etc/bash.bashrc.local (Suse and others) file and append following code:

# vi /etc/bashrc

or
$ sudo gedit /etc/bashrc
Append the code as follows


# If id command returns zero, you’ve root access.
if [ $(id -u) -eq 0 ];
then # you are root, set red colour prompt
  PS1="\\[$(tput setaf 1)\\]\\u@\\h:\\w #\\[$(tput sgr0)\\]"
else # normal
  PS1="[\\u@\\h:\\w] $"
fi


##################################
To change your directory colors, open up your .bashrc file with your vi editor and make the following entry.

--LS_COLORS='di=0;35' ; export LS_COLORS

That's all there is to it.  Well not quite.

Your color choices in this case 0;35 is purple are:

Blue = 34
Green = 32
Light Green = 1;32
Cyan = 36
Red = 31
Purple = 35
Brown = 33
Yellow = 1;33
white = 1;37
Light Grey = 0;37
Black = 30
Dark Grey= 1;30

The first number is how light or dark you want the color to be, followed by a semicolon, and then the actual number of the color.

After you alter your .bashrc file, to put the changes in effect you will have to restart your shell.

If you want to change any other colors in the listing output, that is also customizable.  Read my article on "Changing your shell prompt"

And finally, if you want the commands in the .bashrc to run whenever you open a new shell, or first start up a shell.  You will need to put this line in your .bash_profile file:

if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

The .bash_profile runs when you first open a shell.  This line says run my .bashrc file when you first load a shell.  See my article on "bash_profile or bashrc" for more details.

In closing I thought you'd like to see you how I set up my .bashrc file



##############################################


Where is color of ls command defined?

by NIX Craft on December 1, 2004 · 7 comments· LAST UPDATED December 1, 2004

in News

1) Configuration file for the ls color command is /etc/DIR_COLORS for Linux. You can modify those colours if you want.

2) Here is list of most common colors: (RHEL 3.x/FCx/RH and other linux distros)
Executable files: Green
* Normal file : Normal
* Directory: Blue
* Symbolic link : Cyan
* Pipe: Yellow
* Socket: Magenta
* Block device driver: Bold yellow foreground, with black background
* Character device driver: Bold yellow foreground, with black background
* Orphaned syminks : Blinking Bold white with red background
* Missing links ( - and the files they point to) : Blinking Bold white with red background
* Archives or compressed : Red (.tar, .gz, .zip, .rpm)
* Image files : Magenta (.jpg, gif, bmp, png, tif)

3) They are stored in special shell variable called LS_COLORS

4) You can customized them in /etc/DIR_COLORS or file pointed by shell variable COLORS.

5) To customized colors you must use special string combination:
FILE-TYPE Attribute codes: Text color codes:Background color codes

Where,

    FILE-TYPE: is file type like DIR (for directories)
    Attribute codes:
        00=none
        01=bold
        04=underscore
        05=blink
        07=reverse
        08=concealed
    Text color codes:
        30=black
        31=red
        32=green
        33=yellow
        34=blue
        35=magenta
        36=cyan
        37=white
    Background color codes:
        40=black
        41=red
        42=green
        43=yellow
        44=blue
        45=magenta
        46=cyan
        47=white

For example to define Bold Blue color for DIR file type, entry should look as follows:
DIR 01;34

6) Let us modify dir color on Red Hat (Fedora) Linux:

# vi /etc/DIR_COLORS

Modify DIR entry
From:

DIR 01;34 # default is Bold blue with black background

To:

DIR 01;34;41 # NEW default is Bold blue with RED background

Save file.

7) Logout and login again, Please note that if you have shell variable defined COLORS then use that file (use echo $COLORS to find it out).

